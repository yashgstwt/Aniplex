Index: app/src/main/java/com/example/aniplex/UILayer/DetailScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.aniplex.UILayer\r\n\r\nimport android.graphics.Bitmap\r\nimport android.util.Log\r\nimport androidx.activity.compose.BackHandler\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.border\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.horizontalScroll\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.displayCutoutPadding\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.wrapContentWidth\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Favorite\r\nimport androidx.compose.material.icons.filled.PlayArrow\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.graphics.Brush\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.layout.ContentScale\r\nimport androidx.compose.ui.layout.SubcomposeLayout\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.font.FontFamily\r\nimport androidx.compose.ui.text.font.GenericFontFamily\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.unit.TextUnit\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.core.graphics.drawable.toBitmap\r\nimport androidx.navigation.NavHostController\r\nimport androidx.palette.graphics.Palette\r\nimport coil.compose.AsyncImage\r\nimport coil.compose.AsyncImagePainter\r\nimport com.example.aniplex.DataLayer.aniplexApi.AnimeInfo\r\nimport com.example.aniplex.Navigation.NavigationRoutes\r\nimport com.example.aniplex.ViewModal.AniplexViewModal\r\nimport com.example.aniplex.ViewModal.GetAnimeInfo\r\nimport com.example.aniplex.ui.theme.Vibrant\r\nimport com.example.aniplex.ui.theme.VibrantDark\r\nimport com.example.aniplex.ui.theme.black\r\nimport com.example.aniplex.ui.theme.gradiantColor\r\n\r\n\r\n@Composable\r\nfun DetailScreen(\r\n    viewModal: AniplexViewModal,\r\n    navController: NavHostController,\r\n    animeId: String?,\r\n    isFavScreen: Boolean? = false,\r\n) {\r\n\r\n    LaunchedEffect(key1 = Unit ) {\r\n        viewModal.AnimeInfo = GetAnimeInfo.Loading\r\n        viewModal.getAnimeInfo(animeId!!)\r\n    }\r\n\r\n    when (viewModal.AnimeInfo) {\r\n        is GetAnimeInfo.Success -> {\r\n            var animeInfo: AnimeInfo =  (viewModal.AnimeInfo as GetAnimeInfo.Success).animeInfo\r\n            viewModal.AnimeEpisodesIDs = animeInfo.episodes\r\n            DetailScreenUi(animeInfo, navController, viewModal , isFavScreen)\r\n        }\r\n\r\n        is GetAnimeInfo.Error -> {\r\n            ErrorScreen((viewModal.AnimeInfo as GetAnimeInfo.Error).message.toString())\r\n        }\r\n        is  GetAnimeInfo.Loading -> {\r\n            FullLoadingScreen()\r\n        }\r\n    }\r\n\r\n}\r\n\r\n@Composable\r\nfun DetailScreenUi(\r\n    animeInfo: AnimeInfo,\r\n    navController: NavHostController,\r\n    viewModal: AniplexViewModal,\r\n    isFavScreen: Boolean? = false,\r\n) {\r\n    var darkVibrant by remember { mutableStateOf(gradiantColor) }\r\n    var vibrant by remember { mutableStateOf(Color.LightGray) }\r\n\r\n    var brush: List<Color> = listOf(darkVibrant,black)\r\n    var imageBitmap by remember { mutableStateOf<Bitmap?>(null) }\r\n    var palette:Palette? = null\r\n\r\n    Box(modifier = Modifier\r\n        .fillMaxSize()\r\n        .background(brush = Brush.verticalGradient(brush))\r\n        .verticalScroll(rememberScrollState())\r\n    ) {\r\n        Column(modifier = Modifier\r\n            .fillMaxSize()\r\n            .padding(10.dp)\r\n            .fillMaxSize()\r\n        ){\r\n            Box(\r\n                modifier = Modifier\r\n                    .size(200.dp, 300.dp)\r\n                    .displayCutoutPadding()\r\n                    .wrapContentWidth(Alignment.CenterHorizontally)\r\n                    .clip(shape = RoundedCornerShape(25.dp))\r\n                    .align(Alignment.CenterHorizontally)\r\n                ,contentAlignment = Alignment.TopEnd\r\n            ) {\r\n                AsyncImage(\r\n                    animeInfo.image, contentDescription = \"\",\r\n                    modifier = Modifier\r\n                        .size(200.dp, 300.dp)\r\n                        .clip(RoundedCornerShape(25.dp))\r\n                        .border(\r\n                            2.dp,\r\n                            color = Color.White,\r\n                            shape = RoundedCornerShape(25.dp)\r\n                        ),\r\n                    contentScale = ContentScale.Crop,\r\n                    onState = { state ->\r\n                        if (state is AsyncImagePainter.State.Success) {\r\n                            imageBitmap = state.result.drawable.toBitmap()\r\n                            val softwareBitmap = imageBitmap!!.copy(Bitmap.Config.ARGB_8888, false)\r\n                            palette = Palette.from(softwareBitmap).generate()\r\n                            darkVibrant = palette?.darkVibrantSwatch?.rgb?.let { Color(it) } ?: gradiantColor\r\n                            vibrant = palette?.vibrantSwatch?.rgb?.let { Color(it) } ?: Color.LightGray\r\n                            Vibrant = vibrant\r\n                            VibrantDark = darkVibrant\r\n                        }\r\n                    }\r\n                )\r\n\r\n                Box(\r\n                    modifier = Modifier\r\n                        .padding(10.dp)\r\n                        .clip(RoundedCornerShape(25.dp))\r\n                        .border(1.dp, color = Color.White, shape = RoundedCornerShape(25.dp))\r\n                        .size(35.dp, 25.dp)\r\n                        .background(Color.Gray)\r\n                        .fillMaxWidth(),\r\n                    contentAlignment = Alignment.Center,\r\n                ) {\r\n                    Text(\r\n                        animeInfo.subOrDub,\r\n                        modifier = Modifier,\r\n                        fontSize = 10.sp,\r\n                        color = Color.White\r\n                    )\r\n                }\r\n            }\r\n\r\n            AdaptiveText(\r\n                text = animeInfo.title,\r\n                fontSize = 35.sp,\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .padding(top = 20.dp),\r\n                color = Color.White,\r\n                textAlign = TextAlign.Start,\r\n                fontFamily = FontFamily.Serif,\r\n            )\r\n\r\n\r\n            Row(\r\n                modifier = Modifier\r\n                    .padding(top = 20.dp)\r\n                    .fillMaxWidth()\r\n                    .height(70.dp), horizontalArrangement = Arrangement.SpaceEvenly\r\n            ) {\r\n                Box(\r\n                    modifier = Modifier\r\n                        .clip(shape = RoundedCornerShape(25.dp))\r\n                        .background(vibrant)\r\n                        .size(100.dp, 50.dp)\r\n                        .clickable {\r\n                            navController.navigate(NavigationRoutes.VIDEOPLAYER_SCREEN.toString())\r\n                        },\r\n                    contentAlignment = Alignment.Center\r\n                ) {\r\n                    Icon(\r\n                        imageVector = Icons.Filled.PlayArrow,\r\n                        contentDescription = \"play\",\r\n                        modifier = Modifier.fillMaxSize()\r\n                    )\r\n                }\r\n\r\n                var favColor by remember { mutableStateOf(Color.Black) }\r\n                var isClicked by remember { mutableStateOf(isFavScreen!!) }\r\n\r\n                if(isClicked){\r\n                    favColor = Color.Red\r\n                }else{\r\n                    favColor = Color.Black\r\n                }\r\n\r\n                if (isClicked && !isFavScreen!!) {\r\n                    viewModal.insertFav(animeInfo.id,animeInfo.title,animeInfo.image,animeInfo.subOrDub)\r\n                } else if( !isClicked && isFavScreen!!) {\r\n                    viewModal.DeleteFav(animeInfo.id)\r\n                }\r\n\r\n\r\n                Box(modifier = Modifier\r\n                    .clickable {\r\n                        isClicked = !isClicked\r\n                    }\r\n                    .clip(shape = RoundedCornerShape(25.dp))\r\n                    .background(vibrant.copy(.7f))\r\n                    .size(100.dp, 50.dp),\r\n                    contentAlignment = Alignment.Center\r\n                ) {\r\n                    Icon(\r\n                        imageVector = Icons.Filled.Favorite,\r\n                        contentDescription = \"fav\",\r\n                        modifier = Modifier.fillMaxSize(.8f),\r\n                        tint = favColor\r\n                    )\r\n                }\r\n\r\n            }\r\n\r\n            Text(\"Genera\", fontSize = 20.sp, color = Color.White, fontFamily = FontFamily.Serif)\r\n            Row(modifier = Modifier\r\n                .padding(top = 10.dp)\r\n                .fillMaxWidth()\r\n                .height(50.dp)\r\n                .horizontalScroll(rememberScrollState())) {\r\n                animeInfo.genres.forEach {\r\n                    Box(\r\n                        modifier = Modifier\r\n                            .padding(10.dp)\r\n                            .clip(RoundedCornerShape(25.dp))\r\n                            .border(\r\n                                1.dp,\r\n                                color = Color.White,\r\n                                shape = RoundedCornerShape(25.dp)\r\n                            )\r\n                            .height(height = 25.dp)\r\n                            .background(Vibrant.copy(.5f)),\r\n                        contentAlignment = Alignment.Center,\r\n                    ) {\r\n                        Text(it, modifier = Modifier.padding(start = 5.dp , end = 5.dp), fontSize = 10.sp, color = Color.White)\r\n                    }\r\n                }\r\n            }\r\n            Text(\r\n                \"Description\",\r\n                fontSize = 20.sp,\r\n                color = Color.White,\r\n                fontFamily = FontFamily.Serif\r\n            )\r\n\r\n            Text(\r\n                animeInfo.description,\r\n                color = Color.White,\r\n                fontSize = 15.sp,\r\n                fontFamily = FontFamily.Serif,\r\n                modifier = Modifier\r\n                    .padding(top = 10.dp)\r\n                    .fillMaxWidth()\r\n                    .height(200.dp)\r\n                    .verticalScroll(\r\n                        rememberScrollState()\r\n                    )\r\n\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nfun AdaptiveText(\r\n    text: String,\r\n    modifier: Modifier = Modifier,\r\n    fontSize: TextUnit,\r\n    color: Color,\r\n    textAlign: TextAlign,\r\n    fontFamily: GenericFontFamily,\r\n) {\r\n    SubcomposeLayout(modifier = modifier) { constraints ->\r\n        val placeable = subcompose(\"text\") {\r\n            Text(text, style = TextStyle(fontSize = fontSize , color = color , textAlign = textAlign , fontFamily = fontFamily)) // Initial font size\r\n        }[0].measure(constraints)\r\n\r\n        layout(placeable.width, placeable.height) {\r\n            placeable.placeRelative(0, 0)\r\n        }\r\n    }\r\n}\r\n\r\n//https://www116.anzeat.pro/streamhls/1fedead0f91b1dad2224eb0bf28b1222/ep.2.1730169877.360.m3u8
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/aniplex/UILayer/DetailScreen.kt b/app/src/main/java/com/example/aniplex/UILayer/DetailScreen.kt
--- a/app/src/main/java/com/example/aniplex/UILayer/DetailScreen.kt	(revision 39e90eb111d95880eab89bc04929f312e442b877)
+++ b/app/src/main/java/com/example/aniplex/UILayer/DetailScreen.kt	(date 1735489422357)
@@ -79,6 +79,7 @@
             var animeInfo: AnimeInfo =  (viewModal.AnimeInfo as GetAnimeInfo.Success).animeInfo
             viewModal.AnimeEpisodesIDs = animeInfo.episodes
             DetailScreenUi(animeInfo, navController, viewModal , isFavScreen)
+            Log.d("detailScreen" , "AnimeInfo is Success")
         }
 
         is GetAnimeInfo.Error -> {
@@ -86,6 +87,7 @@
         }
         is  GetAnimeInfo.Loading -> {
             FullLoadingScreen()
+            Log.d("detailScreen" , "AnimeInfo is Loading")
         }
     }
 
@@ -101,7 +103,7 @@
     var darkVibrant by remember { mutableStateOf(gradiantColor) }
     var vibrant by remember { mutableStateOf(Color.LightGray) }
 
-    var brush: List<Color> = listOf(darkVibrant,black)
+    val brush: List<Color> = listOf(darkVibrant,black)
     var imageBitmap by remember { mutableStateOf<Bitmap?>(null) }
     var palette:Palette? = null
 
Index: app/src/main/java/com/example/aniplex/UILayer/HomeScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>@file:OptIn(ExperimentalMaterial3Api::class)\r\n\r\npackage com.example.aniplex.UILayer\r\n\r\n\r\n\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.ScrollState\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.border\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.displayCutoutPadding\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.lazy.LazyRow\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.ArrowBack\r\nimport androidx.compose.material.icons.filled.ArrowForward\r\nimport androidx.compose.material.icons.filled.Search\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.FloatingActionButton\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.draw.shadow\r\nimport androidx.compose.ui.graphics.Brush\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.layout.ContentScale\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.font.FontFamily\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.navigation.NavHostController\r\nimport coil.compose.AsyncImage\r\nimport com.example.aniplex.DataLayer.aniplexApi.Result\r\nimport com.example.aniplex.DataLayer.aniplexApi.ResultX\r\nimport com.example.aniplex.Helper.AutoResizeText\r\nimport com.example.aniplex.Navigation.NavigationRoutes\r\nimport com.example.aniplex.R\r\nimport com.example.aniplex.RoomDb.Favourite\r\nimport com.example.aniplex.ViewModal.AniplexViewModal\r\nimport com.example.aniplex.ViewModal.GetQuote\r\nimport com.example.aniplex.ViewModal.GetRecentEpisodes\r\nimport com.example.aniplex.ViewModal.GetTopAirings\r\nimport com.example.aniplex.ui.theme.black\r\nimport com.example.aniplex.ui.theme.gradiantColor\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.flow.collectLatest\r\nimport kotlinx.coroutines.launch\r\nimport javax.annotation.meta.When\r\n\r\n\r\n@Composable\r\nfun HomeScreen(AniplexViewModal: AniplexViewModal, navController: NavHostController) {\r\n\r\n\r\n    LaunchedEffect(AniplexViewModal.topAiringsPage) {\r\n        AniplexViewModal.getTopAirings(AniplexViewModal.topAiringsPage)\r\n    }\r\n\r\n    LaunchedEffect(AniplexViewModal.recentReleasedPage) {\r\n        AniplexViewModal.getRecentEpisode(page = AniplexViewModal.recentReleasedPage)\r\n    }\r\n    var brush: List<Color> = listOf(gradiantColor, black)\r\n\r\n\r\n    val scrollState = rememberScrollState()\r\n\r\n    Scaffold(floatingActionButton = {\r\n        FloatingActionButton(onClick = {navController.navigate(NavigationRoutes.SEARCH_SCREEN.toString())} , containerColor = gradiantColor, contentColor = Color.White) {\r\n            Icon(imageVector = Icons.Default.Search, contentDescription = \"Add\" , tint = Color.White , )\r\n        }\r\n    }) { padding ->\r\n\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                .background(brush = Brush.verticalGradient(brush))\r\n                .verticalScroll(scrollState)\r\n                .padding(top = 10.dp, start = 10.dp)\r\n        ) {\r\n            Column(\r\n                modifier = Modifier\r\n                    .fillMaxSize()\r\n            ) {\r\n                Spacer(modifier = Modifier.displayCutoutPadding())\r\n                Box(\r\n                    modifier = Modifier.fillMaxWidth().padding(end = 10.dp).clip(RoundedCornerShape(25.dp))\r\n                        .border(1.dp, color = Color.White, shape = RoundedCornerShape(25.dp))\r\n                ) {\r\n                    Image(\r\n                        painter = painterResource(R.drawable.mochuro),\r\n                        contentDescription = \"cover image \",\r\n                        modifier = Modifier.padding(start = 10.dp)\r\n                            .size(70.dp)\r\n                            .align(Alignment.BottomStart),\r\n                        contentScale = ContentScale.Crop\r\n                    )\r\n                    Text(\r\n                        text = \"Aniplex\",\r\n                        fontSize = 35.sp,\r\n                        textAlign = TextAlign.Center,\r\n                        modifier = Modifier.fillMaxWidth().align(Alignment.Center),\r\n                        fontFamily = FontFamily.Serif,\r\n                        color = Color.White,\r\n                        letterSpacing = 7.sp,\r\n\r\n                        )\r\n                }\r\n\r\n                Text(\r\n                    \"Today's Quotes\",\r\n                    fontSize = 25.sp,\r\n                    color = Color.White,\r\n                    modifier = Modifier.padding(top = 15.dp),\r\n                    fontFamily = FontFamily.Serif\r\n                )\r\n\r\n                Column(\r\n                    modifier = Modifier\r\n                        .shadow(55.dp, shape = RoundedCornerShape(25.dp), spotColor = Color.Blue)\r\n                        .padding(top = 10.dp, end = 10.dp)\r\n                        .fillMaxWidth()\r\n                        .height(200.dp)\r\n                        .border(1.dp, color = Color.White, shape = RoundedCornerShape(25.dp))\r\n                        .clip(shape = RoundedCornerShape(25.dp))\r\n                        .background(Color.DarkGray)\r\n                    ){\r\n                    when(AniplexViewModal.quote){\r\n                        is GetQuote.Error -> {}\r\n                        is GetQuote.Loading -> {}\r\n                        is GetQuote.Success -> {\r\n                            Text(\"Anime- ${(AniplexViewModal.quote as GetQuote.Success).quote.data.anime.name}\" ,\r\n                                fontSize = 10.sp ,\r\n                                color = Color.White ,\r\n                                modifier = Modifier.clip(RoundedCornerShape(bottomEnd = 25.dp)).background(gradiantColor).padding(8.dp),\r\n                                fontFamily = FontFamily.Serif\r\n                            )\r\n\r\n                            Box(modifier = Modifier.fillMaxWidth()\r\n                                .height(110.dp)\r\n                                .background(Color.Transparent)\r\n                                .padding(start = 10.dp , end = 10.dp, top = 5.dp)\r\n                                .verticalScroll(ScrollState(0))\r\n                            ){\r\n                                Text(\" “${(AniplexViewModal.quote as GetQuote.Success).quote.data.content}” \", color = Color.White, style = TextStyle(fontFamily = FontFamily.Monospace), fontSize = 15.sp )\r\n                            }\r\n\r\n                            Text(\"~${(AniplexViewModal.quote as GetQuote.Success).quote.data.character.name}\",\r\n                                color = Color.LightGray,\r\n                                fontSize = 15.sp,\r\n                                textAlign = TextAlign.End,\r\n                                modifier = Modifier.padding(end = 15.dp).fillMaxWidth(),\r\n                                fontWeight = FontWeight.ExtraBold,\r\n                                fontFamily = FontFamily.Monospace\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n\r\n//----------------------------------------------------------RecentReleased----------------------------------------------------------------------------------------------------------------\r\n\r\n                Row(\r\n                    modifier = Modifier.fillMaxWidth().padding(top = 20.dp).height(50.dp),\r\n                    verticalAlignment = Alignment.CenterVertically,\r\n                    horizontalArrangement = Arrangement.SpaceBetween\r\n                ) {\r\n                    Text(\r\n                        \"RecentReleased \",\r\n                        fontSize = 25.sp,\r\n                        fontFamily = FontFamily.Serif,\r\n                        color = Color.White\r\n                    )\r\n                    Row(\r\n                        modifier = Modifier.height(50.dp).padding(end = 20.dp),\r\n                        horizontalArrangement = Arrangement.End\r\n                    ) {\r\n                        if (AniplexViewModal.recentReleasedPage > 0) {\r\n                            Icon(\r\n                                imageVector = Icons.Filled.ArrowBack,\r\n                                contentDescription = \"BackArrow\",\r\n                                modifier = Modifier.clickable {\r\n\r\n                                    AniplexViewModal.recentReleasedPage--\r\n\r\n                                }.size(35.dp).align(Alignment.CenterVertically)\r\n                                    .clip(RoundedCornerShape(25.dp)).background(Color.LightGray),\r\n                                tint = Color.White\r\n                            )\r\n                        }\r\n                        Spacer(modifier = Modifier.size(40.dp))\r\n                        Icon(\r\n                            imageVector = Icons.Filled.ArrowForward,\r\n                            contentDescription = \"ForwardArrow\",\r\n                            modifier = Modifier.clickable {\r\n                                AniplexViewModal.recentReleasedPage++\r\n                                //Log.d(\"topairings\", \"HomeScreen: ${AniplexViewModal.recentReleasedPage}\")\r\n\r\n                            }.size(35.dp).align(Alignment.CenterVertically)\r\n                                .clip(RoundedCornerShape(25.dp)).background(Color.LightGray),\r\n                            tint = Color.White\r\n                        )\r\n                    }\r\n                }\r\n\r\n                Box(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .height(200.dp)\r\n                ) {\r\n                    when (AniplexViewModal.recentEpisodes) {\r\n                        is GetRecentEpisodes.Success -> {\r\n                            LazyRow(\r\n                                modifier = Modifier\r\n                                    .fillMaxWidth()\r\n                                    .height(200.dp),\r\n                                horizontalArrangement = Arrangement.Center,\r\n                                verticalAlignment = Alignment.CenterVertically,\r\n\r\n                                ) {\r\n                                items(items = (AniplexViewModal.recentEpisodes as GetRecentEpisodes.Success).data.results) { data ->\r\n                                    NewAnimeCard(data) {\r\n                                        AniplexViewModal.currentEpisode = data.episodeNumber-1\r\n                                        navController.navigate(NavigationRoutes.DETAIL_SCREEN.toString() + \"/$it\" + \"?isFavScreen=${false}\")\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        is GetRecentEpisodes.Error -> {\r\n                            ErrorScreen((AniplexViewModal.recentEpisodes as GetRecentEpisodes.Error).error.toString())\r\n                        }\r\n\r\n                        is GetRecentEpisodes.Loading -> {\r\n                            Loading()\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // --------------------------------------------------TopAiring----------------------------------------------------------------------\r\n\r\n                Row(\r\n                    modifier = Modifier.fillMaxWidth().padding(top = 20.dp).height(50.dp),\r\n                    verticalAlignment = Alignment.CenterVertically,\r\n                    horizontalArrangement = Arrangement.SpaceBetween\r\n                ) {\r\n                    Text(\r\n                        \" TopAirings \",\r\n                        fontSize = 25.sp,\r\n                        fontFamily = FontFamily.Serif,\r\n                        color = Color.White\r\n                    )\r\n                    Row(\r\n                        modifier = Modifier.height(50.dp).padding(end = 20.dp),\r\n                        horizontalArrangement = Arrangement.End\r\n                    ) {\r\n\r\n                        Icon(\r\n                            imageVector = Icons.Filled.ArrowBack,\r\n                            contentDescription = \"arrow\",\r\n                            modifier = Modifier.clickable {\r\n                                //if (AniplexViewModal.topAiringsPage > 0)\r\n                                AniplexViewModal.topAiringsPage--\r\n                                // Log.d(\"topairings\", \"HomeScreen: ${AniplexViewModal.topAiringsPage}\")\r\n\r\n                            }.size(35.dp).align(Alignment.CenterVertically)\r\n                                .clip(RoundedCornerShape(25.dp)).background(Color.LightGray),\r\n                            tint = Color.White\r\n                        )\r\n                        Spacer(Modifier.size(40.dp))\r\n                        Icon(\r\n                            imageVector = Icons.Filled.ArrowForward,\r\n                            contentDescription = \"arrow\",\r\n                            modifier = Modifier.clickable {\r\n                                AniplexViewModal.topAiringsPage++\r\n                                //Log.d(\"topairings\", \"HomeScreen: ${AniplexViewModal.topAiringsPage}\")\r\n\r\n                            }.size(35.dp).align(Alignment.CenterVertically)\r\n                                .clip(RoundedCornerShape(25.dp)).background(Color.LightGray),\r\n                            tint = Color.White\r\n                        )\r\n                    }\r\n                }\r\n\r\n\r\n                Box(\r\n                    modifier = Modifier.fillMaxWidth().height(200.dp),\r\n                    contentAlignment = Alignment.CenterStart,\r\n                ) {\r\n                    when (AniplexViewModal.topAirings) {\r\n                        is GetTopAirings.Error -> ErrorScreen((AniplexViewModal.topAirings as GetTopAirings.Error).message)\r\n                        GetTopAirings.Loading -> Loading()\r\n                        is GetTopAirings.Success -> {\r\n                            LazyRow(\r\n                                modifier = Modifier.matchParentSize(),\r\n                                verticalAlignment = Alignment.CenterVertically,\r\n                                horizontalArrangement = Arrangement.Center\r\n                            ) {\r\n                                items((AniplexViewModal.topAirings as GetTopAirings.Success).airings.results, ) { DATA ->\r\n\r\n                                    AnimeCard(DATA) { id, isFavScreen ->\r\n                                        navController.navigate(NavigationRoutes.DETAIL_SCREEN.toString() + \"/$id\" + \"?isFavScreen=${false}\")\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n//-----------------------------------------------------------------Favourite----------------------------------------------------------------------------------------\r\n                Text(\r\n                    \"Favourite\",\r\n                    fontSize = 25.sp,\r\n                    color = Color.White,\r\n                    modifier = Modifier.padding(top = 15.dp),\r\n                    fontFamily = FontFamily.Serif\r\n                )\r\n                Box(\r\n                    modifier = Modifier.padding(top = 10.dp).fillMaxWidth().height(200.dp),\r\n                    contentAlignment = Alignment.CenterStart,\r\n                ) {\r\n\r\n                    var favouriteList: List<Favourite> by remember { mutableStateOf(emptyList()) }\r\n                    LaunchedEffect(Unit) {\r\n                        CoroutineScope(Dispatchers.IO).launch {\r\n                            AniplexViewModal.db.getFavouriteList().collectLatest { list ->\r\n                                favouriteList = list\r\n                                // favouriteList.reversed()\r\n                                // Log.d(\"room\" , \"${favouriteList}\")\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    LazyRow(\r\n                        modifier = Modifier.matchParentSize(),\r\n                        verticalAlignment = Alignment.CenterVertically,\r\n                        horizontalArrangement = Arrangement.Center\r\n                    ) {\r\n                        items(favouriteList) { DATA ->\r\n                            //Log.d(\"room\" , \"${DATA.animeId} ${DATA.name} ${DATA.imageUrl} ${DATA.dubOrSub}\")\r\n                            FavAnimeCard(\r\n                                DATA.animeId,\r\n                                DATA.name,\r\n                                DATA.imageUrl,\r\n                                DATA.dubOrSub\r\n                            ) { id, isFavScreen ->\r\n                                navController.navigate(NavigationRoutes.DETAIL_SCREEN.toString() + \"/$id\" + \"?isFavScreen=${true}\")\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n    @Composable\r\n    fun NewAnimeCard(data: Result, OnClick: (id: String) -> Unit = {}) {\r\n        Box(\r\n            modifier = Modifier\r\n                .padding(start = 5.dp, end = 5.dp)\r\n                .border(width = 1.dp, color = Color.White, shape = RoundedCornerShape(25.dp))\r\n                .clip(RoundedCornerShape(25.dp))\r\n                .size(140.dp, 200.dp)\r\n                .clickable {\r\n                    OnClick(data.id)\r\n\r\n                },\r\n        )\r\n        {\r\n\r\n            AsyncImage(\r\n                model = data.image,\r\n                contentDescription = data.title,\r\n                alignment = Alignment.BottomStart,\r\n                modifier = Modifier.fillMaxSize(),\r\n                contentScale = ContentScale.Crop\r\n            )\r\n            Text(\r\n                \"Ep : ${data.episodeNumber}\",\r\n                fontSize = 10.sp,\r\n                color = Color.White,\r\n                textAlign = TextAlign.Start,\r\n                modifier = Modifier\r\n                    .clip(shape = RoundedCornerShape(bottomEnd = 25.dp))\r\n                    .background(gradiantColor)\r\n                    .padding(start = 10.dp, top = 2.dp, bottom = 2.dp, end = 10.dp)\r\n            )\r\n\r\n            Column(\r\n                Modifier\r\n                    .fillMaxSize()\r\n                    .background(\r\n                        brush = Brush.verticalGradient(\r\n                            listOf(\r\n                                Color.Transparent,\r\n                                Color.Black\r\n                            )\r\n                        )\r\n                    ),\r\n                verticalArrangement = Arrangement.Bottom,\r\n                horizontalAlignment = Alignment.CenterHorizontally\r\n            ) {\r\n                Text(\r\n                    text = data.title,\r\n                    modifier = Modifier\r\n                        .padding(bottom = 2.dp)\r\n                        .fillMaxWidth(),\r\n                    fontSize = 10.sp,\r\n                    color = Color.White,\r\n                    textAlign = TextAlign.Center,\r\n                    fontWeight = FontWeight.Bold\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    @Composable\r\n    fun AnimeCard(\r\n        result: ResultX,\r\n        OnClick: (id: String, isFavScreen: Boolean) -> Unit = { s: String, b: Boolean -> }\r\n    ) {\r\n        Box(\r\n            modifier = Modifier.padding(5.dp)\r\n                .border(width = 1.dp, color = Color.White, shape = RoundedCornerShape(25.dp))\r\n                .clip(RoundedCornerShape(25.dp))\r\n                .size(140.dp, 200.dp).clickable {\r\n                    OnClick(result.id, false)\r\n                }\r\n\r\n        ) {\r\n\r\n            AsyncImage(\r\n                model = result.image,\r\n                contentDescription = result.title,\r\n                alignment = Alignment.BottomStart,\r\n                modifier = Modifier.fillMaxSize(),\r\n                contentScale = ContentScale.Crop\r\n            )\r\n\r\n            Column(\r\n                modifier = Modifier\r\n                    .fillMaxSize().background(Brush.verticalGradient(listOf(Color.Transparent, Color.Black))),\r\n                verticalArrangement = Arrangement.Bottom,\r\n                horizontalAlignment = Alignment.CenterHorizontally,\r\n            ) {\r\n                Text(\r\n                    text = result.title,\r\n                    modifier = Modifier\r\n                        .padding(bottom = 2.dp)\r\n                        .fillMaxWidth(),\r\n                    fontSize = 10.sp, color = Color.White,\r\n                    textAlign = TextAlign.Center,\r\n                    fontWeight = FontWeight.Bold\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    @Composable\r\n    fun FavAnimeCard(\r\n        id: String,\r\n        name: String,\r\n        imgUrl: String,\r\n        dubOrSub: String,\r\n        OnClick: (id: String, isFavScreen: Boolean) -> Unit\r\n    ) {\r\n        Box(\r\n            modifier = Modifier\r\n                .padding(start = 5.dp, end = 5.dp)\r\n                .border(width = 1.dp, color = Color.White, shape = RoundedCornerShape(25.dp))\r\n                .clip(RoundedCornerShape(25.dp))\r\n                .size(140.dp, 200.dp)\r\n                .clickable {\r\n                    OnClick(id, true)\r\n                },\r\n        )\r\n        {\r\n\r\n            AsyncImage(\r\n                model = imgUrl,\r\n                contentDescription = name,\r\n                alignment = Alignment.BottomStart,\r\n                modifier = Modifier.fillMaxSize(),\r\n                contentScale = ContentScale.Crop\r\n            )\r\n            Text(\r\n                dubOrSub,\r\n                fontSize = 10.sp,\r\n                color = Color.White,\r\n                textAlign = TextAlign.Start,\r\n                modifier = Modifier\r\n                    .clip(shape = RoundedCornerShape(bottomEnd = 25.dp))\r\n                    .background(gradiantColor)\r\n                    .padding(start = 10.dp, top = 2.dp, bottom = 2.dp, end = 10.dp)\r\n            )\r\n\r\n            Column(\r\n                Modifier\r\n                    .fillMaxSize()\r\n                    .background(\r\n                        brush = Brush.verticalGradient(\r\n                            listOf(\r\n                                Color.Transparent,\r\n                                Color.Black\r\n                            )\r\n                        )\r\n                    ),\r\n                verticalArrangement = Arrangement.Bottom,\r\n                horizontalAlignment = Alignment.CenterHorizontally\r\n            ) {\r\n                Text(\r\n                    text = name,\r\n                    modifier = Modifier\r\n                        .padding(bottom = 2.dp)\r\n                        .fillMaxWidth(),\r\n                    fontSize = 10.sp,\r\n                    color = Color.White,\r\n                    textAlign = TextAlign.Center,\r\n                    fontWeight = FontWeight.Bold\r\n                )\r\n            }\r\n        }\r\n    }\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/aniplex/UILayer/HomeScreen.kt b/app/src/main/java/com/example/aniplex/UILayer/HomeScreen.kt
--- a/app/src/main/java/com/example/aniplex/UILayer/HomeScreen.kt	(revision 39e90eb111d95880eab89bc04929f312e442b877)
+++ b/app/src/main/java/com/example/aniplex/UILayer/HomeScreen.kt	(date 1735487101822)
@@ -246,7 +246,7 @@
                                 ) {
                                 items(items = (AniplexViewModal.recentEpisodes as GetRecentEpisodes.Success).data.results) { data ->
                                     NewAnimeCard(data) {
-                                        AniplexViewModal.currentEpisode = data.episodeNumber-1
+                                        AniplexViewModal.   currentEpisode = data.episodeNumber-1
                                         navController.navigate(NavigationRoutes.DETAIL_SCREEN.toString() + "/$it" + "?isFavScreen=${false}")
                                     }
                                 }
