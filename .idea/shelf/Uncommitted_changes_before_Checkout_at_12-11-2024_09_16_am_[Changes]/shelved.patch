Index: app/src/main/java/com/example/aniplex/UILayer/VideoPlayer.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.aniplex.UILayer\r\n\r\nimport android.content.res.Configuration\r\nimport android.net.Uri\r\nimport android.util.Log\r\nimport androidx.annotation.OptIn\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.border\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.PaddingValues\r\nimport androidx.compose.foundation.layout.fillMaxHeight\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.statusBarsPadding\r\nimport androidx.compose.foundation.layout.wrapContentHeight\r\nimport androidx.compose.foundation.layout.wrapContentWidth\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.LazyRow\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.DisposableEffect\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableIntStateOf\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.graphics.Brush\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.compose.ui.viewinterop.AndroidView\r\nimport androidx.lifecycle.Lifecycle\r\nimport androidx.lifecycle.LifecycleEventObserver\r\nimport androidx.lifecycle.LifecycleOwner\r\nimport androidx.lifecycle.compose.LocalLifecycleOwner\r\nimport androidx.media3.common.MediaItem\r\nimport androidx.media3.common.util.UnstableApi\r\nimport androidx.media3.datasource.DefaultHttpDataSource\r\nimport androidx.media3.exoplayer.ExoPlayer\r\nimport androidx.media3.exoplayer.hls.HlsMediaSource\r\nimport androidx.media3.ui.PlayerView\r\nimport com.example.aniplex.R\r\nimport com.example.aniplex.ViewModal.AniplexViewModal\r\nimport com.example.aniplex.ViewModal.GetStreamingData\r\nimport com.example.aniplex.ui.theme.Vibrant\r\nimport com.example.aniplex.ui.theme.VibrantDark\r\nimport com.example.aniplex.ui.theme.black\r\nimport com.example.aniplex.ui.theme.gradiantColor\r\nimport com.google.accompanist.systemuicontroller.SystemUiController\r\nimport com.google.accompanist.systemuicontroller.rememberSystemUiController\r\n\r\n\r\n\r\n@OptIn(UnstableApi::class)\r\n@Composable\r\nfun VideoPlayer(viewModal: AniplexViewModal) {\r\n    var currentEpPlaying by remember { mutableStateOf(viewModal.AnimeEpisodesIDs[viewModal.currentEpisode].id) }\r\n    var playQualityIndex by remember { mutableIntStateOf(0) }\r\n    var URL by remember { mutableStateOf(viewModal.playQuality[playQualityIndex].url) }\r\n\r\n   // Log.d(\"Streaming\" ,\"hayyyyyy\" +currentEpPlaying)\r\n    // method to get streaming link from episode id  i.e from currentEpPlaying\r\n    viewModal.getStreamingLink( currentEpPlaying , viewModal.playbackServer)\r\n\r\n    LaunchedEffect(viewModal.StreamingLink) {\r\n        when(viewModal.StreamingLink){\r\n            is GetStreamingData.Error ->  Log.d(\"Streaming\" , (viewModal.StreamingLink as GetStreamingData.Error).message)\r\n            is GetStreamingData.Loading -> Log.d(\"Streaming\" , \"Loading\")\r\n            is GetStreamingData.Success -> {\r\n                viewModal.playQuality= (viewModal.StreamingLink as GetStreamingData.Success).streamingData.sources\r\n                URL = viewModal.playQuality[playQualityIndex].url\r\n            }\r\n        }\r\n    }\r\n\r\n    // Get the current context\r\n    val context = LocalContext.current\r\n\r\n    // Initialize ExoPlayer\r\n    val exoPlayer = remember { ExoPlayer.Builder(context).build() }\r\n\r\n\r\n    LaunchedEffect (URL){\r\n        if(URL.isNotEmpty()) {\r\n            val hlsDataSourceFactory = DefaultHttpDataSource.Factory()\r\n            val uri = Uri.Builder().encodedPath(URL).build() // streaming url\r\n            val hlsMediaItem = MediaItem.Builder().setUri(uri).build()\r\n            val mediaSource = HlsMediaSource.Factory(hlsDataSourceFactory).createMediaSource(hlsMediaItem)\r\n            exoPlayer.setMediaSource(mediaSource)\r\n            exoPlayer.prepare()\r\n        }\r\n    }\r\n\r\n\r\n    val configuration = LocalConfiguration.current\r\n    val isLandscape = configuration.orientation == Configuration.ORIENTATION_LANDSCAPE\r\n\r\n\r\n    var height by remember { mutableStateOf(0.3f) }\r\n    if (isLandscape) {\r\n       height = 1f\r\n    } else {\r\n        height = 0.27f\r\n    }\r\n    val systemUiController: SystemUiController = rememberSystemUiController()\r\n\r\n    // Manage lifecycle events\r\n    DisposableEffect(Unit) {\r\n        onDispose {\r\n            exoPlayer.release()\r\n        }\r\n    }\r\n\r\n    // Use AndroidView to embed an Android View (PlayerView) into Compose\r\n    val brush: List<Color> = listOf(VibrantDark , black)\r\n    Column(modifier = Modifier\r\n        .fillMaxSize()\r\n        .background(brush = Brush.verticalGradient(brush))\r\n    ) {\r\n        Box(modifier = Modifier.fillMaxWidth().statusBarsPadding().fillMaxHeight(height).wrapContentHeight(Alignment.CenterVertically) , contentAlignment = Alignment.Center) {\r\n            AndroidView(\r\n                factory = { ctx ->\r\n                    PlayerView(ctx).apply {\r\n                        player = exoPlayer\r\n                    }\r\n                },\r\n                modifier = Modifier\r\n                    .background(Color.Black.copy(alpha = .5f))\r\n                    .fillMaxWidth()\r\n                    .fillMaxHeight()\r\n                    .also {\r\n                        if (isLandscape) {\r\n                            systemUiController.isStatusBarVisible = false\r\n                            systemUiController.isNavigationBarVisible = false\r\n                            systemUiController.isSystemBarsVisible =\r\n                                false // Optional: Hide both bars at once\r\n                        } else {\r\n                            systemUiController.isStatusBarVisible = true\r\n                            systemUiController.isNavigationBarVisible = true\r\n                            systemUiController.isSystemBarsVisible =\r\n                                true // Optional: Show both bars at once\r\n                        }\r\n\r\n                    }\r\n            )\r\n            if (exoPlayer.playbackState != ExoPlayer.STATE_READY || exoPlayer.playbackState == ExoPlayer.STATE_BUFFERING) {\r\n                CircularProgressIndicator(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .fillMaxHeight(height)\r\n                        .wrapContentHeight(Alignment.CenterVertically)\r\n                        .wrapContentWidth(Alignment.CenterHorizontally)\r\n                )\r\n            }\r\n        }\r\n\r\n        Text(\"Quality\" , modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(10.dp),\r\n            fontSize = 20.sp,\r\n            color = Color.White\r\n        )\r\n\r\n        LazyRow(modifier = Modifier\r\n            .fillMaxWidth()\r\n            .height(55.dp)\r\n            .background(Color.Transparent),\r\n            contentPadding = PaddingValues(10.dp)\r\n        ) {\r\n            items(viewModal.playQuality){\r\n                ep->\r\n                Box(\r\n                    modifier = Modifier\r\n                        .padding(start = 10.dp, end = 10.dp)\r\n                        .clip(RoundedCornerShape(35.dp))\r\n                        .border(\r\n                            1.dp,\r\n                            color = Color.White,\r\n                            shape = RoundedCornerShape(25.dp)\r\n                        )\r\n                        .height(height = 55.dp)\r\n                        .background(Vibrant.copy(.5f))\r\n                        .clickable {\r\n                          //  URL = ep.url\r\n                            playQualityIndex = viewModal.playQuality.indexOf(ep)\r\n                            Log.d(\"Streaming\", URL)\r\n                        },\r\n\r\n                    contentAlignment = Alignment.Center,\r\n                ) {\r\n                    Text(\r\n                        ep.quality,\r\n                        modifier = Modifier.padding(start = 5.dp, end = 5.dp),\r\n                        fontSize = 20.sp,\r\n                        color = Color.White,\r\n                        textAlign = TextAlign.Center\r\n                    )\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n        Text(\"Episodes\" , modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(10.dp),\r\n            fontSize = 20.sp,\r\n            color = Color.White\r\n        )\r\n\r\n        //Episodes ids\r\n    var currentEp by remember { mutableStateOf(viewModal.currentEpisode) }\r\n        LazyColumn(modifier = Modifier\r\n            .fillMaxWidth()\r\n            .clip(RoundedCornerShape(topStart = 25.dp, topEnd = 25.dp))\r\n            .background(brush = Brush.verticalGradient(listOf(Vibrant.copy(.5f), Color.Transparent)))\r\n            , contentPadding = PaddingValues(10.dp)\r\n        ) {\r\n            items(viewModal.AnimeEpisodesIDs){\r\n                    ep->\r\n                Box(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .height(height = 70.dp)\r\n                        .padding(10.dp)\r\n                        .clip(RoundedCornerShape(25.dp))\r\n                        .border(\r\n                            width = 1.dp,\r\n                            color = Color.White,\r\n                            shape = RoundedCornerShape(25.dp)\r\n                        )\r\n                        .background(if ( ep.number == currentEp ) VibrantDark.copy(.5f) else Vibrant)\r\n                        .clickable {\r\n                            currentEpPlaying = ep.id\r\n                            currentEp = ep.number\r\n                        },\r\n                    contentAlignment = Alignment.Center,\r\n                ) {\r\n\r\n                    Text(\"Episode \"+ ep.number.toString(), modifier = Modifier.padding(start = 5.dp , end = 5.dp), fontSize = 10.sp, color = Color.White, textAlign = TextAlign.Center)\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    val lifecycleOwner = LocalLifecycleOwner.current\r\n\r\n    LaunchedEffect(lifecycleOwner) {\r\n        val lifecycle = lifecycleOwner.lifecycle\r\n        lifecycle.addObserver(object : LifecycleEventObserver {\r\n            override fun onStateChanged(source: LifecycleOwner, event: Lifecycle.Event) {\r\n                when (event) {\r\n                    Lifecycle.Event.ON_PAUSE -> {\r\n                        exoPlayer.pause()\r\n                    }\r\n                    Lifecycle.Event.ON_RESUME -> {\r\n                        exoPlayer.play()\r\n                    }\r\n                    else -> {}\r\n                }\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n//  D  Success(streamingData=StreamingData(headers=Headers(Referer=https://s3taku.com/embedplus?id=MjM0MzM4&token=TAciz9L8o1TLMuvH4cu0NQ&expires=1728212952, UserAgent=null, watchsb=null), sources=[Source(isM3U8=true, quality=360p, url=https://www118.anzeat.pro/streamhls/4bc8df880225830b6077fbccc564a0f4/ep.1.1728066302.360.m3u8), Source(isM3U8=true, quality=480p, url=https://www118.anzeat.pro/streamhls/4bc8df880225830b6077fbccc564a0f4/ep.1.1728066302.480.m3u8), Source(isM3U8=true, quality=default, url=https://www118.anzeat.pro/streamhls/4bc8df880225830b6077fbccc564a0f4/ep.1.1728066302.m3u8), Source(isM3U8=true, quality=backup, url=https://www118.anicdnstream.info/videos/hls/CHjqGbMrJcKUJElLNI5_oQ/1728220153/234338/4bc8df880225830b6077fbccc564a0f4/ep.1.1728066302.m3u8)]))\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/aniplex/UILayer/VideoPlayer.kt b/app/src/main/java/com/example/aniplex/UILayer/VideoPlayer.kt
--- a/app/src/main/java/com/example/aniplex/UILayer/VideoPlayer.kt	
+++ b/app/src/main/java/com/example/aniplex/UILayer/VideoPlayer.kt	
@@ -72,7 +72,7 @@
     var playQualityIndex by remember { mutableIntStateOf(0) }
     var URL by remember { mutableStateOf(viewModal.playQuality[playQualityIndex].url) }
 
-   // Log.d("Streaming" ,"hayyyyyy" +currentEpPlaying)
+    // Log.d("Streaming" ,"hayyyyyy" +currentEpPlaying)
     // method to get streaming link from episode id  i.e from currentEpPlaying
     viewModal.getStreamingLink( currentEpPlaying , viewModal.playbackServer)
 
@@ -112,7 +112,7 @@
 
     var height by remember { mutableStateOf(0.3f) }
     if (isLandscape) {
-       height = 1f
+        height = 1f
     } else {
         height = 0.27f
     }
@@ -122,6 +122,7 @@
     DisposableEffect(Unit) {
         onDispose {
             exoPlayer.release()
+            Log.d("viewmodal","************************************** disposable effect called ")
         }
     }
 
@@ -182,7 +183,7 @@
             contentPadding = PaddingValues(10.dp)
         ) {
             items(viewModal.playQuality){
-                ep->
+                    ep->
                 Box(
                     modifier = Modifier
                         .padding(start = 10.dp, end = 10.dp)
@@ -195,7 +196,7 @@
                         .height(height = 55.dp)
                         .background(Vibrant.copy(.5f))
                         .clickable {
-                          //  URL = ep.url
+                            //  URL = ep.url
                             playQualityIndex = viewModal.playQuality.indexOf(ep)
                             Log.d("Streaming", URL)
                         },
@@ -223,7 +224,7 @@
         )
 
         //Episodes ids
-    var currentEp by remember { mutableStateOf(viewModal.currentEpisode) }
+        var currentEp by remember { mutableStateOf(viewModal.currentEpisode) }
         LazyColumn(modifier = Modifier
             .fillMaxWidth()
             .clip(RoundedCornerShape(topStart = 25.dp, topEnd = 25.dp))
Index: .idea/shelf/Uncommitted_changes_before_Update_at_01-11-2024_11_56_am_[Changes]/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_01-11-2024_11_56_am_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_01-11-2024_11_56_am_[Changes]/shelved.patch
new file mode 100644
--- /dev/null	
+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_01-11-2024_11_56_am_[Changes]/shelved.patch	
@@ -0,0 +1,105 @@
+Index: app/src/main/java/com/example/aniplex/UILayer/VideoPlayer.kt
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package com.example.aniplex.UILayer\r\n\r\nimport android.content.res.Configuration\r\nimport android.net.Uri\r\nimport android.util.Log\r\nimport androidx.annotation.OptIn\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.border\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.PaddingValues\r\nimport androidx.compose.foundation.layout.fillMaxHeight\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.statusBarsPadding\r\nimport androidx.compose.foundation.layout.wrapContentHeight\r\nimport androidx.compose.foundation.layout.wrapContentWidth\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.LazyRow\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.DisposableEffect\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableIntStateOf\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.graphics.Brush\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.compose.ui.viewinterop.AndroidView\r\nimport androidx.lifecycle.Lifecycle\r\nimport androidx.lifecycle.LifecycleEventObserver\r\nimport androidx.lifecycle.LifecycleOwner\r\nimport androidx.lifecycle.compose.LocalLifecycleOwner\r\nimport androidx.media3.common.MediaItem\r\nimport androidx.media3.common.util.UnstableApi\r\nimport androidx.media3.datasource.DefaultHttpDataSource\r\nimport androidx.media3.exoplayer.ExoPlayer\r\nimport androidx.media3.exoplayer.hls.HlsMediaSource\r\nimport androidx.media3.ui.PlayerView\r\nimport com.example.aniplex.R\r\nimport com.example.aniplex.ViewModal.AniplexViewModal\r\nimport com.example.aniplex.ViewModal.GetStreamingData\r\nimport com.example.aniplex.ui.theme.Vibrant\r\nimport com.example.aniplex.ui.theme.VibrantDark\r\nimport com.example.aniplex.ui.theme.black\r\nimport com.example.aniplex.ui.theme.gradiantColor\r\nimport com.google.accompanist.systemuicontroller.SystemUiController\r\nimport com.google.accompanist.systemuicontroller.rememberSystemUiController\r\n\r\n\r\n\r\n@OptIn(UnstableApi::class)\r\n@Composable\r\nfun VideoPlayer(viewModal: AniplexViewModal) {\r\n    var currentEpPlaying by remember { mutableStateOf(viewModal.AnimeEpisodesIDs[viewModal.currentEpisode].id) }\r\n    var playQualityIndex by remember { mutableIntStateOf(0) }\r\n    var URL by remember { mutableStateOf(viewModal.playQuality[playQualityIndex].url) }\r\n\r\n   // Log.d(\"Streaming\" ,\"hayyyyyy\" +currentEpPlaying)\r\n    // method to get streaming link from episode id  i.e from currentEpPlaying\r\n    viewModal.getStreamingLink( currentEpPlaying , viewModal.playbackServer)\r\n\r\n    LaunchedEffect(viewModal.StreamingLink) {\r\n        when(viewModal.StreamingLink){\r\n            is GetStreamingData.Error ->  Log.d(\"Streaming\" , (viewModal.StreamingLink as GetStreamingData.Error).message)\r\n            is GetStreamingData.Loading -> Log.d(\"Streaming\" , \"Loading\")\r\n            is GetStreamingData.Success -> {\r\n                viewModal.playQuality= (viewModal.StreamingLink as GetStreamingData.Success).streamingData.sources\r\n                URL = viewModal.playQuality[playQualityIndex].url\r\n            }\r\n        }\r\n    }\r\n\r\n    // Get the current context\r\n    val context = LocalContext.current\r\n\r\n    // Initialize ExoPlayer\r\n    val exoPlayer = remember { ExoPlayer.Builder(context).build() }\r\n\r\n\r\n    LaunchedEffect (URL){\r\n        if(URL.isNotEmpty()) {\r\n            val hlsDataSourceFactory = DefaultHttpDataSource.Factory()\r\n            val uri = Uri.Builder().encodedPath(URL).build() // streaming url\r\n            val hlsMediaItem = MediaItem.Builder().setUri(uri).build()\r\n            val mediaSource = HlsMediaSource.Factory(hlsDataSourceFactory).createMediaSource(hlsMediaItem)\r\n            exoPlayer.setMediaSource(mediaSource)\r\n            exoPlayer.prepare()\r\n        }\r\n    }\r\n\r\n\r\n    val configuration = LocalConfiguration.current\r\n    val isLandscape = configuration.orientation == Configuration.ORIENTATION_LANDSCAPE\r\n\r\n\r\n    var height by remember { mutableStateOf(0.3f) }\r\n    if (isLandscape) {\r\n       height = 1f\r\n    } else {\r\n        height = 0.27f\r\n    }\r\n    val systemUiController: SystemUiController = rememberSystemUiController()\r\n\r\n    // Manage lifecycle events\r\n    DisposableEffect(Unit) {\r\n        onDispose {\r\n            exoPlayer.release()\r\n        }\r\n    }\r\n\r\n    // Use AndroidView to embed an Android View (PlayerView) into Compose\r\n    val brush: List<Color> = listOf(VibrantDark , black)\r\n    Column(modifier = Modifier\r\n        .fillMaxSize()\r\n        .background(brush = Brush.verticalGradient(brush))\r\n    ) {\r\n        Box(modifier = Modifier.fillMaxWidth().statusBarsPadding().fillMaxHeight(height).wrapContentHeight(Alignment.CenterVertically) , contentAlignment = Alignment.Center) {\r\n            AndroidView(\r\n                factory = { ctx ->\r\n                    PlayerView(ctx).apply {\r\n                        player = exoPlayer\r\n                    }\r\n                },\r\n                modifier = Modifier\r\n                    .background(Color.Black.copy(alpha = .5f))\r\n                    .fillMaxWidth()\r\n                    .fillMaxHeight()\r\n                    .also {\r\n                        if (isLandscape) {\r\n                            systemUiController.isStatusBarVisible = false\r\n                            systemUiController.isNavigationBarVisible = false\r\n                            systemUiController.isSystemBarsVisible =\r\n                                false // Optional: Hide both bars at once\r\n                        } else {\r\n                            systemUiController.isStatusBarVisible = true\r\n                            systemUiController.isNavigationBarVisible = true\r\n                            systemUiController.isSystemBarsVisible =\r\n                                true // Optional: Show both bars at once\r\n                        }\r\n\r\n                    }\r\n            )\r\n            if (exoPlayer.playbackState != ExoPlayer.STATE_READY || exoPlayer.playbackState == ExoPlayer.STATE_BUFFERING) {\r\n                CircularProgressIndicator(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .fillMaxHeight(height)\r\n                        .wrapContentHeight(Alignment.CenterVertically)\r\n                        .wrapContentWidth(Alignment.CenterHorizontally)\r\n                )\r\n            }\r\n        }\r\n\r\n        Text(\"Quality\" , modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(10.dp),\r\n            fontSize = 20.sp,\r\n            color = Color.White\r\n        )\r\n\r\n        LazyRow(modifier = Modifier\r\n            .fillMaxWidth()\r\n            .height(55.dp)\r\n            .background(Color.Transparent),\r\n            contentPadding = PaddingValues(10.dp)\r\n        ) {\r\n            items(viewModal.playQuality){\r\n                ep->\r\n                Box(\r\n                    modifier = Modifier\r\n                        .padding(start = 10.dp, end = 10.dp)\r\n                        .clip(RoundedCornerShape(35.dp))\r\n                        .border(\r\n                            1.dp,\r\n                            color = Color.White,\r\n                            shape = RoundedCornerShape(25.dp)\r\n                        )\r\n                        .height(height = 55.dp)\r\n                        .background(Vibrant.copy(.5f))\r\n                        .clickable {\r\n                          //  URL = ep.url\r\n                            playQualityIndex = viewModal.playQuality.indexOf(ep)\r\n                            Log.d(\"Streaming\", URL)\r\n                        },\r\n\r\n                    contentAlignment = Alignment.Center,\r\n                ) {\r\n                    Text(\r\n                        ep.quality,\r\n                        modifier = Modifier.padding(start = 5.dp, end = 5.dp),\r\n                        fontSize = 20.sp,\r\n                        color = Color.White,\r\n                        textAlign = TextAlign.Center\r\n                    )\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n        Text(\"Episodes\" , modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(10.dp),\r\n            fontSize = 20.sp,\r\n            color = Color.White\r\n        )\r\n\r\n        //Episodes ids\r\n    var currentEp by remember { mutableStateOf(viewModal.currentEpisode) }\r\n        LazyColumn(modifier = Modifier\r\n            .fillMaxWidth()\r\n            .clip(RoundedCornerShape(topStart = 25.dp, topEnd = 25.dp))\r\n            .background(brush = Brush.verticalGradient(listOf(Vibrant.copy(.5f), Color.Transparent)))\r\n            , contentPadding = PaddingValues(10.dp)\r\n        ) {\r\n            items(viewModal.AnimeEpisodesIDs){\r\n                    ep->\r\n                Box(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .height(height = 70.dp)\r\n                        .padding(10.dp)\r\n                        .clip(RoundedCornerShape(25.dp))\r\n                        .border(\r\n                            width = 1.dp,\r\n                            color = Color.White,\r\n                            shape = RoundedCornerShape(25.dp)\r\n                        )\r\n                        .background(if ( ep.number == currentEp ) VibrantDark.copy(.5f) else Vibrant)\r\n                        .clickable {\r\n                            currentEpPlaying = ep.id\r\n                            currentEp = ep.number\r\n                        },\r\n                    contentAlignment = Alignment.Center,\r\n                ) {\r\n\r\n                    Text(\"Episode \"+ ep.number.toString(), modifier = Modifier.padding(start = 5.dp , end = 5.dp), fontSize = 10.sp, color = Color.White, textAlign = TextAlign.Center)\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    val lifecycleOwner = LocalLifecycleOwner.current\r\n\r\n    LaunchedEffect(lifecycleOwner) {\r\n        val lifecycle = lifecycleOwner.lifecycle\r\n        lifecycle.addObserver(object : LifecycleEventObserver {\r\n            override fun onStateChanged(source: LifecycleOwner, event: Lifecycle.Event) {\r\n                when (event) {\r\n                    Lifecycle.Event.ON_PAUSE -> {\r\n                        exoPlayer.pause()\r\n                    }\r\n                    Lifecycle.Event.ON_RESUME -> {\r\n                        exoPlayer.play()\r\n                    }\r\n                    else -> {}\r\n                }\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n//  D  Success(streamingData=StreamingData(headers=Headers(Referer=https://s3taku.com/embedplus?id=MjM0MzM4&token=TAciz9L8o1TLMuvH4cu0NQ&expires=1728212952, UserAgent=null, watchsb=null), sources=[Source(isM3U8=true, quality=360p, url=https://www118.anzeat.pro/streamhls/4bc8df880225830b6077fbccc564a0f4/ep.1.1728066302.360.m3u8), Source(isM3U8=true, quality=480p, url=https://www118.anzeat.pro/streamhls/4bc8df880225830b6077fbccc564a0f4/ep.1.1728066302.480.m3u8), Source(isM3U8=true, quality=default, url=https://www118.anzeat.pro/streamhls/4bc8df880225830b6077fbccc564a0f4/ep.1.1728066302.m3u8), Source(isM3U8=true, quality=backup, url=https://www118.anicdnstream.info/videos/hls/CHjqGbMrJcKUJElLNI5_oQ/1728220153/234338/4bc8df880225830b6077fbccc564a0f4/ep.1.1728066302.m3u8)]))\r\n\r\n\r\n\r\n\r\n\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/src/main/java/com/example/aniplex/UILayer/VideoPlayer.kt b/app/src/main/java/com/example/aniplex/UILayer/VideoPlayer.kt
+--- a/app/src/main/java/com/example/aniplex/UILayer/VideoPlayer.kt	(revision 8da28eead6f35751caedf94183be3bc36fafef58)
++++ b/app/src/main/java/com/example/aniplex/UILayer/VideoPlayer.kt	(date 1730349424873)
+@@ -122,6 +122,7 @@
+     DisposableEffect(Unit) {
+         onDispose {
+             exoPlayer.release()
++            viewModal.currentEpisode = 0
+         }
+     }
+ 
+@@ -131,7 +132,12 @@
+         .fillMaxSize()
+         .background(brush = Brush.verticalGradient(brush))
+     ) {
+-        Box(modifier = Modifier.fillMaxWidth().statusBarsPadding().fillMaxHeight(height).wrapContentHeight(Alignment.CenterVertically) , contentAlignment = Alignment.Center) {
++        Box(modifier = Modifier.fillMaxWidth()
++            .statusBarsPadding()
++            .fillMaxHeight(height)
++            .wrapContentHeight(Alignment.CenterVertically) ,
++            contentAlignment = Alignment.Center
++        ) {
+             AndroidView(
+                 factory = { ctx ->
+                     PlayerView(ctx).apply {
+@@ -146,15 +152,12 @@
+                         if (isLandscape) {
+                             systemUiController.isStatusBarVisible = false
+                             systemUiController.isNavigationBarVisible = false
+-                            systemUiController.isSystemBarsVisible =
+-                                false // Optional: Hide both bars at once
++                           // systemUiController.isSystemBarsVisible = false // Optional: Hide both bars at once
+                         } else {
+                             systemUiController.isStatusBarVisible = true
+                             systemUiController.isNavigationBarVisible = true
+-                            systemUiController.isSystemBarsVisible =
+-                                true // Optional: Show both bars at once
++                          //  systemUiController.isSystemBarsVisible = true // Optional: Show both bars at once
+                         }
+-
+                     }
+             )
+             if (exoPlayer.playbackState != ExoPlayer.STATE_READY || exoPlayer.playbackState == ExoPlayer.STATE_BUFFERING) {
+Index: app/src/main/java/com/example/aniplex/UILayer/HomeScreen.kt
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>@file:OptIn(ExperimentalMaterial3Api::class)\r\n\r\npackage com.example.aniplex.UILayer\r\n\r\n\r\n\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.ScrollState\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.border\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.displayCutoutPadding\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.lazy.LazyRow\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.ArrowBack\r\nimport androidx.compose.material.icons.filled.ArrowForward\r\nimport androidx.compose.material.icons.filled.Search\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.FloatingActionButton\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.draw.shadow\r\nimport androidx.compose.ui.graphics.Brush\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.layout.ContentScale\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.font.FontFamily\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.navigation.NavHostController\r\nimport coil.compose.AsyncImage\r\nimport com.example.aniplex.DataLayer.aniplexApi.Result\r\nimport com.example.aniplex.DataLayer.aniplexApi.ResultX\r\nimport com.example.aniplex.Helper.AutoResizeText\r\nimport com.example.aniplex.Navigation.NavigationRoutes\r\nimport com.example.aniplex.R\r\nimport com.example.aniplex.RoomDb.Favourite\r\nimport com.example.aniplex.ViewModal.AniplexViewModal\r\nimport com.example.aniplex.ViewModal.GetQuote\r\nimport com.example.aniplex.ViewModal.GetRecentEpisodes\r\nimport com.example.aniplex.ViewModal.GetTopAirings\r\nimport com.example.aniplex.ui.theme.black\r\nimport com.example.aniplex.ui.theme.gradiantColor\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.flow.collectLatest\r\nimport kotlinx.coroutines.launch\r\nimport javax.annotation.meta.When\r\n\r\n\r\n@Composable\r\nfun HomeScreen(AniplexViewModal: AniplexViewModal, navController: NavHostController) {\r\n\r\n\r\n    LaunchedEffect(AniplexViewModal.topAiringsPage) {\r\n        AniplexViewModal.getTopAirings(AniplexViewModal.topAiringsPage)\r\n    }\r\n\r\n    LaunchedEffect(AniplexViewModal.recentReleasedPage) {\r\n        AniplexViewModal.getRecentEpisode(page = AniplexViewModal.recentReleasedPage)\r\n    }\r\n    var brush: List<Color> = listOf(gradiantColor, black)\r\n\r\n\r\n    val scrollState = rememberScrollState()\r\n\r\n    Scaffold(floatingActionButton = {\r\n        FloatingActionButton(onClick = {navController.navigate(NavigationRoutes.SEARCH_SCREEN.toString())} , containerColor = gradiantColor, contentColor = Color.White) {\r\n            Icon(imageVector = Icons.Default.Search, contentDescription = \"Add\" , tint = Color.White , )\r\n        }\r\n    }) { padding ->\r\n\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                .background(brush = Brush.verticalGradient(brush))\r\n                .verticalScroll(scrollState)\r\n                .padding(top = 10.dp, start = 10.dp)\r\n        ) {\r\n            Column(\r\n                modifier = Modifier\r\n                    .fillMaxSize()\r\n            ) {\r\n                Spacer(modifier = Modifier.displayCutoutPadding())\r\n                Box(\r\n                    modifier = Modifier.fillMaxWidth().padding(end = 10.dp).clip(RoundedCornerShape(25.dp))\r\n                        .border(2.dp, color = Color.White, shape = RoundedCornerShape(25.dp))\r\n                ) {\r\n                    Image(\r\n                        painter = painterResource(R.drawable.mochuro),\r\n                        contentDescription = \"cover image \",\r\n                        modifier = Modifier.padding(start = 10.dp)\r\n                            .size(70.dp)\r\n                            .align(Alignment.BottomStart),\r\n                        contentScale = ContentScale.Crop\r\n                    )\r\n                    Text(\r\n                        text = \"Aniplex\",\r\n                        fontSize = 35.sp,\r\n                        textAlign = TextAlign.Center,\r\n                        modifier = Modifier.fillMaxWidth().align(Alignment.Center),\r\n                        fontFamily = FontFamily.Serif,\r\n                        color = Color.White,\r\n                        letterSpacing = 7.sp,\r\n\r\n                        )\r\n                }\r\n\r\n                Text(\r\n                    \"Today's Quotes\",\r\n                    fontSize = 25.sp,\r\n                    color = Color.White,\r\n                    modifier = Modifier.padding(top = 15.dp),\r\n                    fontFamily = FontFamily.Serif\r\n                )\r\n\r\n                Column(\r\n                    modifier = Modifier\r\n                        .shadow(55.dp, shape = RoundedCornerShape(25.dp), spotColor = Color.Blue)\r\n                        .padding(top = 10.dp, end = 10.dp)\r\n                        .fillMaxWidth()\r\n                        .height(200.dp)\r\n                        .border(2.dp, color = Color.White, shape = RoundedCornerShape(25.dp))\r\n                        .clip(shape = RoundedCornerShape(25.dp))\r\n                        .background(Color.DarkGray)\r\n                    ){\r\n                    when(AniplexViewModal.quote){\r\n                        is GetQuote.Error -> {}\r\n                        is GetQuote.Loading -> {}\r\n                        is GetQuote.Success -> {\r\n                            Text(\"Anime- ${(AniplexViewModal.quote as GetQuote.Success).quote.data.anime.name}\" ,\r\n                                fontSize = 10.sp ,\r\n                                color = Color.White ,\r\n                                modifier = Modifier.clip(RoundedCornerShape(bottomEnd = 25.dp)).background(gradiantColor).padding(8.dp),\r\n                                fontFamily = FontFamily.Serif\r\n                            )\r\n\r\n                            Box(modifier = Modifier.fillMaxWidth()\r\n                                .height(110.dp)\r\n                                .background(Color.Transparent)\r\n                                .padding(start = 10.dp , end = 10.dp, top = 5.dp)\r\n                                .verticalScroll(ScrollState(0))\r\n                            ){\r\n                                Text(\" “${(AniplexViewModal.quote as GetQuote.Success).quote.data.content}” \", color = Color.White, style = TextStyle(fontFamily = FontFamily.Monospace), fontSize = 15.sp )\r\n                            }\r\n\r\n                            Text(\"~${(AniplexViewModal.quote as GetQuote.Success).quote.data.character.name}\",\r\n                                color = Color.LightGray,\r\n                                fontSize = 15.sp,\r\n                                textAlign = TextAlign.End,\r\n                                modifier = Modifier.padding(end = 15.dp).fillMaxWidth(),\r\n                                fontWeight = FontWeight.ExtraBold,\r\n                                fontFamily = FontFamily.Monospace\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n\r\n//----------------------------------------------------------RecentReleased----------------------------------------------------------------------------------------------------------------\r\n\r\n                Row(\r\n                    modifier = Modifier.fillMaxWidth().padding(top = 20.dp).height(50.dp),\r\n                    verticalAlignment = Alignment.CenterVertically,\r\n                    horizontalArrangement = Arrangement.SpaceBetween\r\n                ) {\r\n                    Text(\r\n                        \"RecentReleased \",\r\n                        fontSize = 25.sp,\r\n                        fontFamily = FontFamily.Serif,\r\n                        color = Color.White\r\n                    )\r\n                    Row(\r\n                        modifier = Modifier.height(50.dp).padding(end = 20.dp),\r\n                        horizontalArrangement = Arrangement.End\r\n                    ) {\r\n                        if (AniplexViewModal.recentReleasedPage > 0) {\r\n                            Icon(\r\n                                imageVector = Icons.Filled.ArrowBack,\r\n                                contentDescription = \"BackArrow\",\r\n                                modifier = Modifier.clickable {\r\n\r\n                                    AniplexViewModal.recentReleasedPage--\r\n\r\n                                }.size(35.dp).align(Alignment.CenterVertically)\r\n                                    .clip(RoundedCornerShape(25.dp)).background(Color.LightGray),\r\n                                tint = Color.White\r\n                            )\r\n                        }\r\n                        Spacer(modifier = Modifier.size(40.dp))\r\n                        Icon(\r\n                            imageVector = Icons.Filled.ArrowForward,\r\n                            contentDescription = \"ForwardArrow\",\r\n                            modifier = Modifier.clickable {\r\n                                AniplexViewModal.recentReleasedPage++\r\n                                //Log.d(\"topairings\", \"HomeScreen: ${AniplexViewModal.recentReleasedPage}\")\r\n\r\n                            }.size(35.dp).align(Alignment.CenterVertically)\r\n                                .clip(RoundedCornerShape(25.dp)).background(Color.LightGray),\r\n                            tint = Color.White\r\n                        )\r\n                    }\r\n                }\r\n\r\n                Box(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .height(200.dp)\r\n                ) {\r\n                    when (AniplexViewModal.recentEpisodes) {\r\n                        is GetRecentEpisodes.Success -> {\r\n                            LazyRow(\r\n                                modifier = Modifier\r\n                                    .fillMaxWidth()\r\n                                    .height(200.dp),\r\n                                horizontalArrangement = Arrangement.Center,\r\n                                verticalAlignment = Alignment.CenterVertically,\r\n\r\n                                ) {\r\n                                items(items = (AniplexViewModal.recentEpisodes as GetRecentEpisodes.Success).data.results) { data ->\r\n                                    NewAnimeCard(data) {\r\n                                        AniplexViewModal.currentEpisode = data.episodeNumber-1\r\n                                        navController.navigate(NavigationRoutes.DETAIL_SCREEN.toString() + \"/$it\" + \"?isFavScreen=${false}\")\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        is GetRecentEpisodes.Error -> {\r\n                            ErrorScreen((AniplexViewModal.recentEpisodes as GetRecentEpisodes.Error).error.toString())\r\n                        }\r\n\r\n                        is GetRecentEpisodes.Loading -> {\r\n                            Loading()\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // --------------------------------------------------TopAiring----------------------------------------------------------------------\r\n\r\n                Row(\r\n                    modifier = Modifier.fillMaxWidth().padding(top = 20.dp).height(50.dp),\r\n                    verticalAlignment = Alignment.CenterVertically,\r\n                    horizontalArrangement = Arrangement.SpaceBetween\r\n                ) {\r\n                    Text(\r\n                        \" TopAirings \",\r\n                        fontSize = 25.sp,\r\n                        fontFamily = FontFamily.Serif,\r\n                        color = Color.White\r\n                    )\r\n                    Row(\r\n                        modifier = Modifier.height(50.dp).padding(end = 20.dp),\r\n                        horizontalArrangement = Arrangement.End\r\n                    ) {\r\n\r\n                        Icon(\r\n                            imageVector = Icons.Filled.ArrowBack,\r\n                            contentDescription = \"arrow\",\r\n                            modifier = Modifier.clickable {\r\n                                //if (AniplexViewModal.topAiringsPage > 0)\r\n                                AniplexViewModal.topAiringsPage--\r\n                                // Log.d(\"topairings\", \"HomeScreen: ${AniplexViewModal.topAiringsPage}\")\r\n\r\n                            }.size(35.dp).align(Alignment.CenterVertically)\r\n                                .clip(RoundedCornerShape(25.dp)).background(Color.LightGray),\r\n                            tint = Color.White\r\n                        )\r\n                        Spacer(Modifier.size(40.dp))\r\n                        Icon(\r\n                            imageVector = Icons.Filled.ArrowForward,\r\n                            contentDescription = \"arrow\",\r\n                            modifier = Modifier.clickable {\r\n                                AniplexViewModal.topAiringsPage++\r\n                                //Log.d(\"topairings\", \"HomeScreen: ${AniplexViewModal.topAiringsPage}\")\r\n\r\n                            }.size(35.dp).align(Alignment.CenterVertically)\r\n                                .clip(RoundedCornerShape(25.dp)).background(Color.LightGray),\r\n                            tint = Color.White\r\n                        )\r\n                    }\r\n                }\r\n\r\n\r\n                Box(\r\n                    modifier = Modifier.fillMaxWidth().height(200.dp),\r\n                    contentAlignment = Alignment.CenterStart,\r\n                ) {\r\n                    when (AniplexViewModal.topAirings) {\r\n                        is GetTopAirings.Error -> ErrorScreen((AniplexViewModal.topAirings as GetTopAirings.Error).message)\r\n                        GetTopAirings.Loading -> Loading()\r\n                        is GetTopAirings.Success -> {\r\n                            LazyRow(\r\n                                modifier = Modifier.matchParentSize(),\r\n                                verticalAlignment = Alignment.CenterVertically,\r\n                                horizontalArrangement = Arrangement.Center\r\n                            ) {\r\n                                items((AniplexViewModal.topAirings as GetTopAirings.Success).airings.results) { DATA ->\r\n\r\n                                    AnimeCard(DATA) { id, isFavScreen ->\r\n                                        navController.navigate(NavigationRoutes.DETAIL_SCREEN.toString() + \"/$id\" + \"?isFavScreen=${false}\")\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n//-----------------------------------------------------------------Favourite----------------------------------------------------------------------------------------\r\n                Text(\r\n                    \"Favourite\",\r\n                    fontSize = 25.sp,\r\n                    color = Color.White,\r\n                    modifier = Modifier.padding(top = 15.dp),\r\n                    fontFamily = FontFamily.Serif\r\n                )\r\n                Box(\r\n                    modifier = Modifier.padding(top = 10.dp).fillMaxWidth().height(200.dp),\r\n                    contentAlignment = Alignment.CenterStart,\r\n                ) {\r\n\r\n                    var favouriteList: List<Favourite> by remember { mutableStateOf(emptyList()) }\r\n                    LaunchedEffect(Unit) {\r\n                        CoroutineScope(Dispatchers.IO).launch {\r\n                            AniplexViewModal.db.getFavouriteList().collectLatest { list ->\r\n                                favouriteList = list\r\n                                // favouriteList.reversed()\r\n                                // Log.d(\"room\" , \"${favouriteList}\")\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    LazyRow(\r\n                        modifier = Modifier.matchParentSize(),\r\n                        verticalAlignment = Alignment.CenterVertically,\r\n                        horizontalArrangement = Arrangement.Center\r\n                    ) {\r\n                        items(favouriteList) { DATA ->\r\n                            //Log.d(\"room\" , \"${DATA.animeId} ${DATA.name} ${DATA.imageUrl} ${DATA.dubOrSub}\")\r\n                            FavAnimeCard(\r\n                                DATA.animeId,\r\n                                DATA.name,\r\n                                DATA.imageUrl,\r\n                                DATA.dubOrSub\r\n                            ) { id, isFavScreen ->\r\n                                navController.navigate(NavigationRoutes.DETAIL_SCREEN.toString() + \"/$id\" + \"?isFavScreen=${true}\")\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n    @Composable\r\n    fun NewAnimeCard(data: Result, OnClick: (id: String) -> Unit = {}) {\r\n        Box(\r\n            modifier = Modifier\r\n                .padding(start = 5.dp, end = 5.dp)\r\n                .border(width = 2.dp, color = Color.White, shape = RoundedCornerShape(25.dp))\r\n                .clip(RoundedCornerShape(25.dp))\r\n                .size(140.dp, 200.dp)\r\n                .clickable {\r\n                    OnClick(data.id)\r\n\r\n                },\r\n        )\r\n        {\r\n\r\n            AsyncImage(\r\n                model = data.image,\r\n                contentDescription = data.title,\r\n                alignment = Alignment.BottomStart,\r\n                modifier = Modifier.fillMaxSize(),\r\n                contentScale = ContentScale.Crop\r\n            )\r\n            Text(\r\n                \"Ep : ${data.episodeNumber}\",\r\n                fontSize = 10.sp,\r\n                color = Color.White,\r\n                textAlign = TextAlign.Start,\r\n                modifier = Modifier\r\n                    .clip(shape = RoundedCornerShape(bottomEnd = 25.dp))\r\n                    .background(gradiantColor)\r\n                    .padding(start = 10.dp, top = 2.dp, bottom = 2.dp, end = 10.dp)\r\n            )\r\n\r\n            Column(\r\n                Modifier\r\n                    .fillMaxSize()\r\n                    .background(\r\n                        brush = Brush.verticalGradient(\r\n                            listOf(\r\n                                Color.Transparent,\r\n                                Color.Black\r\n                            )\r\n                        )\r\n                    ),\r\n                verticalArrangement = Arrangement.Bottom,\r\n                horizontalAlignment = Alignment.CenterHorizontally\r\n            ) {\r\n                Text(\r\n                    text = data.title,\r\n                    modifier = Modifier\r\n                        .padding(bottom = 2.dp)\r\n                        .fillMaxWidth(),\r\n                    fontSize = 10.sp,\r\n                    color = Color.White,\r\n                    textAlign = TextAlign.Center,\r\n                    fontWeight = FontWeight.Bold\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    @Composable\r\n    fun AnimeCard(\r\n        result: ResultX,\r\n        OnClick: (id: String, isFavScreen: Boolean) -> Unit = { s: String, b: Boolean -> }\r\n    ) {\r\n        Box(\r\n            modifier = Modifier.padding(5.dp)\r\n                .border(width = 2.dp, color = Color.White, shape = RoundedCornerShape(25.dp))\r\n                .clip(RoundedCornerShape(25.dp))\r\n                .size(140.dp, 200.dp).clickable {\r\n                    OnClick(result.id, false)\r\n                }\r\n\r\n        ) {\r\n\r\n            AsyncImage(\r\n                model = result.image,\r\n                contentDescription = result.title,\r\n                alignment = Alignment.BottomStart,\r\n                modifier = Modifier.fillMaxSize(),\r\n                contentScale = ContentScale.Crop\r\n            )\r\n\r\n            Column(\r\n                modifier = Modifier\r\n                    .fillMaxSize().background(Brush.verticalGradient(listOf(Color.Transparent, Color.Black))),\r\n                verticalArrangement = Arrangement.Bottom,\r\n                horizontalAlignment = Alignment.CenterHorizontally,\r\n            ) {\r\n                Text(\r\n                    text = result.title,\r\n                    modifier = Modifier\r\n                        .padding(bottom = 2.dp)\r\n                        .fillMaxWidth(),\r\n                    fontSize = 10.sp, color = Color.White,\r\n                    textAlign = TextAlign.Center,\r\n                    fontWeight = FontWeight.Bold\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    @Composable\r\n    fun FavAnimeCard(\r\n        id: String,\r\n        name: String,\r\n        imgUrl: String,\r\n        dubOrSub: String,\r\n        OnClick: (id: String, isFavScreen: Boolean) -> Unit\r\n    ) {\r\n        Box(\r\n            modifier = Modifier\r\n                .padding(start = 5.dp, end = 5.dp)\r\n                .border(width = 2.dp, color = Color.White, shape = RoundedCornerShape(25.dp))\r\n                .clip(RoundedCornerShape(25.dp))\r\n                .size(140.dp, 200.dp)\r\n                .clickable {\r\n                    OnClick(id, true)\r\n                },\r\n        )\r\n        {\r\n\r\n            AsyncImage(\r\n                model = imgUrl,\r\n                contentDescription = name,\r\n                alignment = Alignment.BottomStart,\r\n                modifier = Modifier.fillMaxSize(),\r\n                contentScale = ContentScale.Crop\r\n            )\r\n            Text(\r\n                dubOrSub,\r\n                fontSize = 10.sp,\r\n                color = Color.White,\r\n                textAlign = TextAlign.Start,\r\n                modifier = Modifier\r\n                    .clip(shape = RoundedCornerShape(bottomEnd = 25.dp))\r\n                    .background(gradiantColor)\r\n                    .padding(start = 10.dp, top = 2.dp, bottom = 2.dp, end = 10.dp)\r\n            )\r\n\r\n            Column(\r\n                Modifier\r\n                    .fillMaxSize()\r\n                    .background(\r\n                        brush = Brush.verticalGradient(\r\n                            listOf(\r\n                                Color.Transparent,\r\n                                Color.Black\r\n                            )\r\n                        )\r\n                    ),\r\n                verticalArrangement = Arrangement.Bottom,\r\n                horizontalAlignment = Alignment.CenterHorizontally\r\n            ) {\r\n                Text(\r\n                    text = name,\r\n                    modifier = Modifier\r\n                        .padding(bottom = 2.dp)\r\n                        .fillMaxWidth(),\r\n                    fontSize = 10.sp,\r\n                    color = Color.White,\r\n                    textAlign = TextAlign.Center,\r\n                    fontWeight = FontWeight.Bold\r\n                )\r\n            }\r\n        }\r\n    }\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/src/main/java/com/example/aniplex/UILayer/HomeScreen.kt b/app/src/main/java/com/example/aniplex/UILayer/HomeScreen.kt
+--- a/app/src/main/java/com/example/aniplex/UILayer/HomeScreen.kt	(revision 8da28eead6f35751caedf94183be3bc36fafef58)
++++ b/app/src/main/java/com/example/aniplex/UILayer/HomeScreen.kt	(date 1730347739019)
+@@ -112,7 +112,7 @@
+                 Spacer(modifier = Modifier.displayCutoutPadding())
+                 Box(
+                     modifier = Modifier.fillMaxWidth().padding(end = 10.dp).clip(RoundedCornerShape(25.dp))
+-                        .border(2.dp, color = Color.White, shape = RoundedCornerShape(25.dp))
++                        .border(1.dp, color = Color.White, shape = RoundedCornerShape(25.dp))
+                 ) {
+                     Image(
+                         painter = painterResource(R.drawable.mochuro),
+@@ -148,7 +148,7 @@
+                         .padding(top = 10.dp, end = 10.dp)
+                         .fillMaxWidth()
+                         .height(200.dp)
+-                        .border(2.dp, color = Color.White, shape = RoundedCornerShape(25.dp))
++                        .border(1.dp, color = Color.White, shape = RoundedCornerShape(25.dp))
+                         .clip(shape = RoundedCornerShape(25.dp))
+                         .background(Color.DarkGray)
+                     ){
+@@ -385,7 +385,7 @@
+         Box(
+             modifier = Modifier
+                 .padding(start = 5.dp, end = 5.dp)
+-                .border(width = 2.dp, color = Color.White, shape = RoundedCornerShape(25.dp))
++                .border(width = 1.dp, color = Color.White, shape = RoundedCornerShape(25.dp))
+                 .clip(RoundedCornerShape(25.dp))
+                 .size(140.dp, 200.dp)
+                 .clickable {
+@@ -449,7 +449,7 @@
+     ) {
+         Box(
+             modifier = Modifier.padding(5.dp)
+-                .border(width = 2.dp, color = Color.White, shape = RoundedCornerShape(25.dp))
++                .border(width = 1.dp, color = Color.White, shape = RoundedCornerShape(25.dp))
+                 .clip(RoundedCornerShape(25.dp))
+                 .size(140.dp, 200.dp).clickable {
+                     OnClick(result.id, false)
+@@ -496,7 +496,7 @@
+         Box(
+             modifier = Modifier
+                 .padding(start = 5.dp, end = 5.dp)
+-                .border(width = 2.dp, color = Color.White, shape = RoundedCornerShape(25.dp))
++                .border(width = 1.dp, color = Color.White, shape = RoundedCornerShape(25.dp))
+                 .clip(RoundedCornerShape(25.dp))
+                 .size(140.dp, 200.dp)
+                 .clickable {
